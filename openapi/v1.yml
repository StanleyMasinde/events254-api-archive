openapi: "3.0.2"
info:
  title: Events254
  description: Events254 internal API
  version: "1.0"
servers:
  - url: https://api.events254.co.ke
    description: Production servers
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    user:
      type: object
      required:
        - name
        - username
        - email
        - password
      properties:
        name:
          type: string
          description: The name of the user
        email:
          type: string
          description: The email of the user
        username:
          type: string
          description: The username of the user
        bio:
          type: string
          description: The user's short introduction
    loginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: This can be the username or email
        password:
          type: string
          format: password
          description: The user's current password
    loginResponse:
      type: object
      required:
        - user
      properties:
        user:
          type: object
          required:
            - id
            - name
            - email
            - username
            - bio
            - token
          properties:
            id:
              type: integer
              format: int64
              description: The unique ID of the user
            name:
              type: string
              description: The name of the user
            email:
              type: string
              format: email
              description: The email of the user
            username:
              type: string
              description: The autogenerated username of the current user
            bio:
              type: string
              description: The bio of the user
              default: No bio
            created_at:
              type: string
              format: datetime
              description: When the user was lasst created
            updated_at:
              type: string
              format: datetime
              description: When the user was last updated
            token:
              type: string
              description: The token that will be used to authenticate requests.
    registerUserRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          description: The full name of the User
        email:
          type: string
          format: email
          description: The unique email of the user
        password:
          type: string
          format: password
          description: The new password of the user
    registerUserReponse:
      $ref: "#/components/schemas/user"
    requestPassword:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: The current eamil
    updatePasswordRequest:
      type: object
      required:
        - email
        - token
        - passoword
      properties:
        email:
          type: string
          format: email
          description: The current user's email
        token:
          type: string
          description: The token sent to the email
        passoword:
          type: string
          format: passoword
          description: The new password for the user
    createEventRequest:
      type: object
      required:
        - about
        - description
        - startDate
        - startTime
        - category_id
      properties:
        image:
          type: string
          format: binary
          description: The event poster image.
        location:
          type: string
          description: The event address if the event is an in-person event
        online_link:
          type: string
          description: The online event link if the event is a virtual event
        about:
          type: string
          description: The title of the event
        description:
          type: string
          description: The description of the event only HTML and plaintext are supported.
        startTime:
          type: string
          format: time
          description: The time the event is starting in 2hrs e.g 09:00, 23:00
        startDate:
          type: string
          format: date
          description: The date of the event e.g 12/03/2021
        endTime:
          type: string
          format: time
          description: The time the event is ending ins 24hrs format e.g 23:00
        endDate:
          type: string
          format: date
          description: The date the event is ending
        category_id:
          type: integer
          format: int64
          description: The category the event belogngs to
    createEventResponse:
      type: object
      required:
        - image
        - about
        - description
        - startDate
        - startTime
        - category_id
        - organisable_type
        - organisable_id
        - created_at
        - updated_at
      properties:
        image:
          type: string
          format: binary
        location:
          type: string
        online_link:
          type: string
        about:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: time
        endDate:
          type: string
        organisable_type:
          type: string
        organisable_id:
          type: integer
          format: int64
        category_id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    event:
      type: object
      required:
        - id
        - image
        - about
        - description
        - startDate
        - endDate
        - category_id
        - organiser
        - tickets
        - isFree
        - allDay
        - inProgress
        - past
        - hasEndTime
        - attendees
        - can_edit
        - location
        - online_link
        - created_at
        - updated_at
      properties:
        id:
          type: string
          description: The unique identifier of the event
        image:
          type: string
          description: The url of the image
        about:
          type: string
          description: The title of the event
        description:
          type: string
          description: A HTML description of the event
        startDate:
          type: string
          format: date-time
          description: Start time in ISO UTC
        endDate:
          type: string
          format: date-time
          description: End time in ISO UTC
        category_id:
          type: integer
          format: int64
        organiser:
          type: object
          $ref: "#/components/schemas/eventOrganiser"
        tickets:
          type: array
          items:
            $ref: "#/components/schemas/ticket"
        isFree:
          type: boolean
          description: True if the event is fee to attent
        allDay:
          type: boolean
          description: True if the current event is an all day event
        inProgress:
          type: boolean
          description: True if the current event is in inProgress
        past:
          type: boolean
          description: True if the current event has already passed.
        published:
          type: boolean
          description: Shows if the event is published
        is_sponsored:
          type: boolean
          description: Shows if the event is a sponsored event
        hasEndTime:
          type: boolean
          description: True is the current event has an endTime
        attendees:
          type: array
          items:
            $ref: "#/components/schemas/user"
          description: The people who have registered for the current event
        can_edit:
          type: boolean
          description: Show if the current user has persmissions to manage the current event.
        location:
          type: string
          description: The physical Location of the event
        online_link:
          type: string
          description: The link to the event if the event is virtual
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    ticket:
      type: object
      required:
        - id
        - event_id
        - price
        - currency
        - limit
        - type
      properties:
        id:
          type: integer
          format: int64
        event_id:
          type: integer
          format: int64
          description: The event that the ticket belogngs to
        price:
          type: number
          format: float
          description: The price of the current ticket
        type:
          type: string
          description: The type of ticket e.g Regular
          default: General admission
    userTicket:
      type: object
      required:
        - image
        - eventName
        - eventDate
        - ticketId
        - userId
        - tikcetCount
        - ticketType
        - ticketPrice
        - currency
        - organiser
      properties:
        image:
          type: string
          description: The image url for the event of this ticket
        eventName:
          type: string
          description: The name of the event
        eventDate:
          type: string
          description: When the event is starting
        eventLocation:
          type: string
          description: Where the event will take place can be blank
        ticketId:
          type: integer
          format: int64
          description: The unique ID of the current ticket
        userId:
          type: integer
          format: int64
          description: The unique id of the user that owns the ticket
        tikcetCount:
          type: integer
          format: int64
          description: The number of tickets/slots purchased
        ticketType:
          type: string
          description: The class of the ticket e.g early bird,
        ticketPrice:
          type: integer
          format: float
          description: The amount paid for the ticket
        currency:
          type: string
          description: the currency that was used to purchase the ticket
        organiser:
          type: object
          description: The person/group that owns the event
          required:
            - name
            - id
          properties:
            id:
              type: integer
              format: int64
              description: The unique id of the organiser
            name:
              type: string
              description: the name of the organiser
            slug:
              type: string
              description: The URL slug of the organiser if the organiser is a group
    createTicketRequest:
      type: object
      required:
        - price
        - limit
        - type
      properties:
        price:
          type: number
          format: float
          description: The price of the current ticket
        type:
          type: string
          description: The ticket type e.g VIP, Regular
        limit:
          type: integer
          format: int64
          description: The maximum number of tickets of this type
    eventOrganiser:
      type: object
      required:
        - type
        - id
        - name
      properties:
        type:
          type: string
          enum:
            - user
            - group
          description: Am event can be organized by either an user or a group
        id:
          type: integer
          format: int64
          description: The id of the organiser
        name:
          type: string
          description: The name of the organiser
        adminIds:
          type: array
          items: {}
          description: If the event is owned by a group, the admin IDs will be here
    ticketOrderRequest:
      type: object
      required:
        - ticket_id
      properties:
        ticket_id:
          type: integer
          format: int64
    TicketOrderResponse:
      type: object
      required:
        - message
        - ticketId
      properties:
        message:
          type: string
        ticketId:
          type: integer
          format: int64
    searchResults:
      type: object
      required:
        - events
        - people
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/event"
        people:
          type: array
          items:
            $ref: "#/components/schemas/user"
    calendarResults:
      type: array
      items:
        $ref: "#/components/schemas/event"
    newsfeed:
      type: object
      required:
        - feedItem
      properties:
        feedItem:
          type: object
          required:
            - name
            - data
          properties:
            name:
              type: string
            data:
              type: array
              items:
                $ref: "#/components/schemas/feedObject"
    feedObject:
      type: object
      required:
        - id
        - name
        - description
        - linkPrefix
      properties:
        id:
          type: string
          description: The unique identifier
        name:
          type: string
          description: This can be the title
        description:
          type: string
          description: The description
        linkPrefix:
          type: string
          description: Used to identify the feed item type e.g event or group
        startDate:
          type: string
          format: date-time
          description: Start datetime
        endDate:
          type: string
          format: date-time
          description: End date-time
        duration:
          type: string
          description: The duration if the item is an event
        image:
          type: string
          description: Image url
    validationErrors:
      type: object
      properties:
        errors:
          type: array
          items: {}

paths:
  /ping:
    get:
      operationId: ping
      description: Ping the API
      responses:
        "200":
          description: Pong
          content:
            text/html:
              schema:
                type: string
        "500":
          description: Server error
  /feed:
    get:
      operationId: newsfeed
      description: Get the event for the landing page
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/newsfeed"
        "500":
          description: Server Error
  /users/{userId}:
    get:
      description: Get user by Id
      operationId: get user
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: The user was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          description: Unauthenticated/Unauthorized
  /users/update:
    post:
      description: Update current user
      operationId: update current user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        description: Update current user's profile
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/user"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
  /search:
    get:
      description: Search for events, people
      operationId: search
      parameters:
        - in: query
          name: q
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/searchResults"
        "500":
          description: Server error
  /search/calendar:
    get:
      description: Search by calendar
      operationId: query calendar
      parameters:
        - in: query
          name: date
          required: false
          schema:
            type: string
            format: date
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/calendarResults"
        "500":
          description: server error
  /auth/login:
    post:
      operationId: login user
      requestBody:
        required: true
        description: Attempt to authenticate a user and get a token
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/loginRequest"
      responses:
        "200":
          description: The credentials were correct.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/loginResponse"
        "500":
          description: Server Error
  /auth/register:
    post:
      operationId: register user
      requestBody:
        required: true
        description: Create a new user account
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/registerUserRequest"
      responses:
        "200":
          description: User has been succesfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/registerUserReponse"
        "422":
          description: Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/validationErrors"
        "500":
          description: Server Error
  /auth/password:
    post:
      operationId: reset password
      description: Request a new password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestPassword"
      responses:
        "200":
          description: The request was succesful
        "422":
          description: User not found or Validation errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/validationErrors"
        "500":
          description: Server Error
  /auth/password/update:
    post:
      operationId: update password
      description: Update a users password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/updatePasswordRequest"
      responses:
        "200":
          description: password reset succesful
          content:
            application/json:
              schema:
                type: string
        "422":
          description: Validation Errors
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/validationErrors"
  /auth/user:
    get:
      security:
        - bearerAuth: []
      operationId: Get the current user
      description: Get the current authenticated user
      responses:
        "200":
          description: Ok response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "401":
          description: Not authenticated
        "500":
          description: Server Error
  /auth/tickets:
    get:
      security:
        - bearerAuth: []
      operationId: get current users tickets
      description: Get the tickets for the current user
      responses:
        "200":
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ticket"
        "401":
          description: Not authenticated
        "500":
          description: Server Error
  /events:
    post:
      security:
        - bearerAuth: []
      operationId: Create event
      description: Create a new event as a user
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/createEventRequest"
      responses:
        "201":
          description: Creation succesful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createEventResponse"
  /events/{id}:
    get:
      description: Get Event by Id
      operationId: get event by id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: The event was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/event"
    put:
      description: Update a given event
      operationId: update event
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "201":
          description: updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createEventResponse"
        "401":
          description: Unauthenticated/Unauthorized
    delete:
      security:
        - bearerAuth: []
      description: Delete an event
      operationId: Delete event
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: updated
          content:
            application/json:
              schema:
                type: string
        "401":
          description: Unauthenticated/Unauthorized
  /events/currentUser:
    get:
      security:
        - bearerAuth: []
      operationId: current user's events
      description: Get the events for the currentlty authenticated user
      summary: Returns all the events by the current user
      responses:
        "200":
          description: succesful
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/event"
        "401":
          description: Unauthenticated/Unauthorized
          content:
            application/json:
              schema:
                type: string
        "500":
          description: Server Error
  /events/{eventId}/publish:
    put:
      security:
        - bearerAuth: []
      operationId: toggle event published status
      parameters:
        - in: path
          name: eventId
          required: true
          description: event id
          schema:
            type: integer
            format: int64
      responses:
        "201":
          description: updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createEventResponse"
        "401":
          description: Unauthenticated/Unauthorized
  /events/{eventId}/tickets:
    get:
      security:
        - bearerAuth: []
      operationId: Get event tickets
      parameters:
        - in: path
          name: eventId
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ticket"

        "401":
          description: Unauthenticated/Unauthorized
    post:
      security:
        - bearerAuth: []
      operationId: create ticket
      parameters:
        - in: path
          name: eventId
          required: true
          description: Event id
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createTicketRequest"
      responses:
        "201":
          description: updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ticket"

        "401":
          description: Unauthenticated/Unauthorized
  /events/{eventId}/tickets/{ticketId}:
    get:
      description: Get a ticket by id
      operationId: Get ticket
      parameters:
        - in: path
          name: eventId
          required: true
          description: Event id
          schema:
            type: integer
            format: int64
        - in: path
          name: ticketId
          required: true
          description: Event id
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ticket"
        "404":
          description: Not found
        "401":
          description: Unauthenticated/Unauthorized
    put:
      description: update ticket information
      operationId: update ticket
      parameters:
        - in: path
          name: eventId
          required: true
          description: Event id
          schema:
            type: integer
            format: int64
        - in: path
          name: ticketId
          required: true
          description: Event id
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ticket"

        "401":
          description: Unauthenticated/Unauthorized
    delete:
      description: Delete a ticket
      operationId: delete ticket
      parameters:
        - in: path
          name: eventId
          required: true
          description: Event id
          schema:
            type: integer
            format: int64
        - in: path
          name: ticketId
          required: true
          description: Event id
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: Deleted
          content:
            application/json:
              schema:
                type: string
        "404":
          description: ticket not found
        "401":
          description: Unauthenticated/Unauthorized
  /events/{eventId}/register:
    post:
      operationId: order ticket
      parameters:
        - in: path
          name: eventId
          required: true
          description: Event id
          schema:
            type: integer
            format: int64
      description: register for event
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ticketOrderRequest"
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TicketOrderResponse"
        "401":
          description: Unauthenticated/Unauthorized
  /tickets/{ticketId}:
    get:
      operationId: Get a single ticket
      parameters:
        - in: path
          name: ticketId
          required: true
          description: The ticket Id
          schema:
            type: integer
            format: int64
      description: Get a ticket by ID
      responses:
        "200":
          description: Deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userTicket"
        "401":
          description: Unauthenticated/Unauthorized
